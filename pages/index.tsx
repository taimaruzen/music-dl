import Head from "next/head";
import Image from "next/image";
import { Geist, Geist_Mono } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useEffect, useState } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});
export type Track = {
  title: string;
  description: string;
  file: string;
  category: string;
};

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});
const tracks: Track[] = [
  {
    title: "ゆったりBGM",
    description: "穏やかな気分にさせてくれる曲です。",
    file: "sample1.mp3",
    category: "リラックス",
  },
  {
    title: "朝のランニング",
    description: "テンションを上げたいときに。",
    file: "sample2.mp3",
    category: "アップテンポ",
  },
  {
    title: "夜のチルアウト",
    description: "睡眠前に最適。",
    file: "sample3.mp3",
    category: "リラックス",
  },
  {
    title: "ドライブ",
    description: "車で聴きたい爽快な曲。",
    file: "sample4.mp3",
    category: "アップテンポ",
  },
];

export default function Home() {
  const [search, setSearch] = useState('');
  const [isDark, setIsDark] = useState(false);
  const [counts, setCounts] = useState<Record<string, number>>({});
  const [trackList, setTrackList] = useState<Track[]>(tracks);

  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [categoryInput, setCategoryInput] = useState('');
  const [file, setFile] = useState<File | null>(null);

  useEffect(() => {
    const saved = localStorage.getItem("downloadCounts");
    if (saved) {
      setCounts(JSON.parse(saved));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem("downloadCounts", JSON.stringify(counts));
  }, [counts]);

  useEffect(() => {
    const root = document.documentElement;
    if (isDark) {
      root.classList.add("dark");
    } else {
      root.classList.remove("dark");
    }
  }, [isDark]);

  const filtered = trackList.filter((t) =>
    (t.title + t.description).toLowerCase().includes(search.toLowerCase())
  );
  const categories = Array.from(new Set(filtered.map((t) => t.category)));

  const handleDownload = (file: string) => {
    setCounts((prev) => ({ ...prev, [file]: (prev[file] || 0) + 1 }));
  };

  const handleAdd = () => {
    if (!file) return;
    const newTrack: Track = {
      title,
      description,
      category: categoryInput,
      file: file.name,
    };
    setTrackList((prev) => [...prev, newTrack]);
    setTitle('');
    setDescription('');
    setCategoryInput('');
    setFile(null);
  };

  return (
    <>
      <Head>
        <title>music-dl</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={`min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 ${styles.page} ${geistSans.variable} ${geistMono.variable}`}>
        <main className={styles.main}>
          <div className="max-w-3xl mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4 text-center">音楽ダウンロードサイト</h1>
            <div className="sticky top-0 z-10 bg-gray-50 dark:bg-gray-900 py-2 mb-6 flex items-center gap-4">
              <input
                type="text"
                placeholder="検索..."
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="flex-1 border rounded px-3 py-2 text-sm focus:outline-none"
              />
              <label className="flex items-center cursor-pointer ml-4">
                <span className="mr-2 text-sm">Dark</span>
                <input
                  type="checkbox"
                  className="sr-only"
                  checked={isDark}
                  onChange={(e) => setIsDark(e.target.checked)}
                />
                <div className="w-10 h-6 bg-gray-300 rounded-full p-1 flex items-center">
                  <div
                    className={`bg-white w-4 h-4 rounded-full transform transition ${
                      isDark ? "translate-x-4" : ""
                    }`}
                  />
                </div>
              </label>
            </div>
            {categories.map((cat) => (
              <section key={cat} className="bg-gray-100 dark:bg-gray-800 rounded p-4 mb-6">
                <h2 className="text-lg font-bold mb-3">{cat}</h2>
                <div className="flex flex-col gap-4">
                  {filtered
                    .filter((t) => t.category === cat)
                    .map((track) => (
                      <div key={track.file} className="flex flex-wrap items-center gap-4">
                        <div className="flex-1 min-w-[150px]">
                          <h3 className="font-semibold">{track.title}</h3>
                          <p className="text-sm text-gray-600 dark:text-gray-300">
                            {track.description}
                          </p>
                        </div>
                        <audio
                          controls
                          className="flex-1 min-w-[180px]"
                          src={`/bgm/${track.file}`}
                        />
                        <a
                          href={`/bgm/${track.file}`}
                          download
                          onClick={() => handleDownload(track.file)}
                          className="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded"
                        >
                          ダウンロード ({counts[track.file] || 0})
                        </a>
                      </div>
                    ))}
                </div>
              </section>
            ))}
            <section className="flex flex-col gap-2 bg-gray-100 dark:bg-gray-800 p-4 rounded">
              <h2 className="text-lg font-bold">楽曲をアップロード</h2>
              <input
                type="text"
                placeholder="タイトル"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="border rounded px-3 py-2 text-sm focus:outline-none"
              />
              <input
                type="text"
                placeholder="説明"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="border rounded px-3 py-2 text-sm focus:outline-none"
              />
              <input
                type="text"
                placeholder="カテゴリ"
                value={categoryInput}
                onChange={(e) => setCategoryInput(e.target.value)}
                className="border rounded px-3 py-2 text-sm focus:outline-none"
              />
              <input
                type="file"
                accept=".mp3"
                onChange={(e) => setFile(e.target.files ? e.target.files[0] : null)}
                className="text-sm"
              />
              <button
                onClick={handleAdd}
                className="bg-green-500 hover:bg-green-600 text-white rounded px-3 py-1 text-sm"
              >
                追加
              </button>
            </section>
          </div>
        </main>
        <footer className="text-center text-sm text-gray-500 py-4">© 2025 music-dl</footer>
      </div>
    </>
  );
}